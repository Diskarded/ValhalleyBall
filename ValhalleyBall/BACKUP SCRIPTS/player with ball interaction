using UnityEngine;

[RequireComponent(typeof(Rigidbody))]
public class PlayerController : MonoBehaviour
{
    public float moveSpeed = 5f;
    public float jumpForce = 8f;
    public float deceleration = 20f;
    public float fallMultiplier = 3f;
    public float lowJumpMultiplier = 2f;
    public float hitForce = 10f;

    private Rigidbody rb;
    private bool isGrounded;

    void Start()
    {
        rb = GetComponent<Rigidbody>();
    }

    void Update()
    {
        // Movement Input
        float horizontal = Input.GetAxisRaw("Horizontal");
        float vertical = Input.GetAxisRaw("Vertical");
        Vector3 moveInput = new Vector3(horizontal, 0, vertical).normalized;

        Vector3 currentVelocity = rb.linearVelocity;

        if (moveInput != Vector3.zero)
        {
            Vector3 targetVelocity = moveInput * moveSpeed;
            rb.linearVelocity = new Vector3(targetVelocity.x, currentVelocity.y, targetVelocity.z);
        }
        else
        {
            Vector3 flatVelocity = new Vector3(currentVelocity.x, 0, currentVelocity.z);
            Vector3 decel = flatVelocity.normalized * deceleration * Time.deltaTime;

            if (decel.sqrMagnitude > flatVelocity.sqrMagnitude)
                flatVelocity = Vector3.zero;
            else
                flatVelocity -= decel;

            rb.linearVelocity = new Vector3(flatVelocity.x, currentVelocity.y, flatVelocity.z);
        }

        // Jump
        if (Input.GetKeyDown(KeyCode.Space) && isGrounded)
        {
            rb.AddForce(Vector3.up * jumpForce, ForceMode.Impulse);
            isGrounded = false;
        }

        // Custom gravity for better jump feel
        if (!isGrounded)
        {
            if (rb.linearVelocity.y < 0)
            {
                rb.AddForce(Vector3.up * Physics.gravity.y * (fallMultiplier - 1), ForceMode.Acceleration);
            }
            else if (rb.linearVelocity.y > 0 && !Input.GetKey(KeyCode.Space))
            {
                rb.AddForce(Vector3.up * Physics.gravity.y * (lowJumpMultiplier - 1), ForceMode.Acceleration);
            }
        }
    }

    void OnCollisionEnter(Collision collision)
    {
        foreach (ContactPoint contact in collision.contacts)
        {
            if (contact.normal.y > 0.5f)
            {
                isGrounded = true;
                break;
            }
        }
    }

    void OnTriggerStay(Collider other)
    {
        if (other.CompareTag("Ball") && Input.GetKeyDown(KeyCode.F))
        {
            Rigidbody ballRb = other.GetComponent<Rigidbody>();
            if (ballRb != null)
            {
                Vector3 hitDirection = (other.transform.position - transform.position).normalized + Vector3.up * 0.5f;
                ballRb.AddForce(hitDirection * hitForce, ForceMode.Impulse);
            }
        }
    }
}
